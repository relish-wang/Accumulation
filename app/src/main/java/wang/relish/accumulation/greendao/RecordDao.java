package wang.relish.accumulation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import wang.relish.accumulation.entity.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECORD".
 */
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property GoalId = new Property(1, long.class, "goalId", false, "GOAL_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Star = new Property(3, Integer.class, "star", false, "STAR");
        public final static Property Note = new Property(4, String.class, "note", false, "NOTE");
        public final static Property Time = new Property(5, Long.class, "time", false, "TIME");
        public final static Property CreateTime = new Property(6, String.class, "createTime", false, "CREATE_TIME");
        public final static Property StartTime = new Property(7, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, String.class, "endTime", false, "END_TIME");
        public final static Property UpdateTime = new Property(9, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public RecordDao(DaoConfig config) {
        super(config);
    }

    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"GOAL_ID\" INTEGER NOT NULL ," + // 1: goalId
                "\"NAME\" TEXT," + // 2: name
                "\"STAR\" INTEGER," + // 3: star
                "\"NOTE\" TEXT," + // 4: note
                "\"TIME\" INTEGER," + // 5: time
                "\"CREATE_TIME\" TEXT," + // 6: createTime
                "\"START_TIME\" TEXT," + // 7: startTime
                "\"END_TIME\" TEXT," + // 8: endTime
                "\"UPDATE_TIME\" TEXT);"); // 9: updateTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGoalId());

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        Integer star = entity.getStar();
        if (star != null) {
            stmt.bindLong(4, star);
        }

        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }

        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }

        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(8, startTime);
        }

        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(9, endTime);
        }

        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(10, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGoalId());

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        Integer star = entity.getStar();
        if (star != null) {
            stmt.bindLong(4, star);
        }

        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }

        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }

        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(8, startTime);
        }

        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(9, endTime);
        }

        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(10, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
                cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // goalId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // star
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // note
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // time
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createTime
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // startTime
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // endTime
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // updateTime
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGoalId(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStar(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Record entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
